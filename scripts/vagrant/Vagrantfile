# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
#
$script = <<-SCRIPT
  # echo I am provisioning too not privileged...
  # curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  # source ~/.nvm/nvm.sh
  # nvm install 16.14.2
SCRIPT

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-18.04"
  # config.vm.provision "file", source: "/Users/melchor_tatlonghari/WebstormProjects/Hypothesis-project-gemini", destination: "."
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 7777, host: 8080, auto_correct: true, protocol: "tcp"
  # config.vm.network "forwarded_port", guest: 7777, host: 8080, auto_correct: true, protocol: "udp"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.10" # EXPOSES LOCAL IP

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "/Users/melchor_tatlonghari/WebstormProjects/Hypothesis-project-gemini", "/home/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y nginx
    apt-get -y install vim
    echo I am provisioning...
    sudo ufw allow 'Nginx HTTP'
    sudo systemctl enable nginx
  SHELL
  config.vm.provision "shell", inline: $script,  privileged: false
end

# ON LOGIN:
# source ~/.nvm/nvm.sh (node is not set bash_profile)
# UPDATE: /etc/nginx/conf.d/default.conf OR etc/nginx/sites-available/default (map out localhost with nginx)
# RESTART NGINXi#: sudo systemctl restart nginx
# GET CURRENT IP: ip r
#
# INSTALL NODE: https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04
# sudo vim default
# location / {
#   proxy_pass http://127.0.0.1:3000;
# }
#
#
#
# ON LOGIN:source ~/.nvm/nvm.sh